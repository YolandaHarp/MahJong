
@startuml
left to right direction
skinparam dpi 700
skinparam linetype polyline
package model{
class Cards_in_hand {
  -ArrayList<Integer> cards
  -Stack_of_cards stack
  -PutAwayCards putAwayCard
  -Discard_Pile discards
  -Actions action
  -boolean[] status
  +Cards_in_hand(Stack_of_cards p)
  +void sortCards()
  +void drawCard(Stack_of_cards p)
  +int playCard(int n)
  +void checkCards(int n)
}
class Stack_of_cards {
  -Deque<Integer> stack
  +Stack_of_cards()
  +int pick()
  +int getJoker()
}
class PutAwayCards {
  -ArrayList<ArrayList<Integer>> putAwayCard
  +void add(ArrayList<Integer> n)
  +ArrayList<ArrayList<Integer>> show()
}
class Discard_Pile {
  -ArrayList<Integer> cards
  +void add(int n)
  +ArrayList<Integer> show()
  +int getLast()
  +void remove()
}
}
package actions{
interface Find_Action {
  +findCards(): void
  +checkCard(n: int): void
  +removeCard(n: int): void
}

class Check_Chow {
  -chowCards: Map<Integer, ArrayList<Integer[]>>
  -actionPairs: ArrayList<Integer[]>
  -actionCard: Integer
  -cards: Cards_in_hand
  +Check_Chow(cards: Cards_in_hand): void
}

class Check_Win {
  -winCards: ArrayList<Integer>
  -used: boolean[]
  -check: ArrayList<Integer>
  -pairs: ArrayList<Integer>
  -cards: Cards_in_hand
  +Check_Win(cards: Cards_in_hand): void
}
class Check_Other_Win{
    +checkSevenPairs(jokerInHandOrigin: int): boolean
    +checkOneOfAKind(cardCountOrigin: int[],jokerInHandOrigin int[])
}
class Check_Pong {
  -ArrayList<Integer> availableCards
  -Cards_in_hand cards
  -Integer actionCard
  +Check_Pong(cards: Cards_in_hand)
}

class Check_ExposedKong {
  +Check_ExposedKong(cards: Cards_in_hand)
}

class Check_ConcealedKong {
  +Check_ConcealedKong(cards: Cards_in_hand)
}
class Actions {
  - Find_Action[] actions
  + Actions(Cards_in_hand c)
  + void findCardsAction()
  + void checkCardAction(int n)
  + void checkCardAction_draw(int n)
}
}
package game{
class Mahjong{
  -Cards_in_hand[] players
  - Stack_of_cards stack
  +  void mainGame()
}
class Transmit{
-Stack_of_cards stack
-Mahjong MJ
-Discard_Pile discards
int playernum
}
}
package net{
class Client{
boolean receiveContinue
+void startClient(String serverHostname, int port)
+void sendMessage
+void endMessage
+void stopClient

}
class EchoServer2c{
-boolean serverContinue
-ArrayList<ObjectOutputStream> clientSockets
+void startServer(int port)
+void broadcastMessage(Object message,ObjectOutputStream o)
+void closeServer
}
class GetIP{
+String ip()
}
}
package GUI{
package Game{}
class CardsController{
+void initialize()
+void updateScreen(int i)
+void updateGame(boolean hide)
+void updateChoices(boolean b)
+int playCard()
+int getChoice()
}
}
package language{
class LanguageChange{}
}
package MainScreen{
package StartScreen{}

abstract class StartGame{
+void startGame()
+abstract void mode()
}
class ClientGame{
+void mode()
}
class HostGame{
+void mode()
}
class LocalGame{
+void mode()
}
}
package screen{
package cardsScreen{
class cardScreen extends JavaFX{
  +void drawMJn(Graphics g, int x, int y, double a)
}
}
class OtherScreen{
}
}
package application{
class MainApp{
}
}
Find_Action <|.. Check_Chow
Find_Action <|.. Check_Pong
Find_Action <|.. Check_Win
Find_Action <|.. Check_ConcealedKong
Find_Action <|.. Check_ExposedKong
Check_ExposedKong --|> Check_Pong
Check_ConcealedKong --|> Check_ExposedKong
Check_Other_Win <--> Check_Win
Actions -->Check_Chow
Actions -->Check_Pong
Actions -->Check_Win
Actions -->Check_ConcealedKong
Actions -->Check_ExposedKong
Cards_in_hand --> PutAwayCards
Cards_in_hand --> Discard_Pile
Cards_in_hand <--> Actions
Cards_in_hand ..> Stack_of_cards
game <--> net
game <--> screen
game <--> GUI
game <--> MainScreen
game <--> model
game --> application
Transmit-->Client
Transmit-->EchoServer2c
GetIP-->EchoServer2c
StartGame-->LocalGame
StartGame-->ClientGame
StartGame-->HostGame
language-->GUI
language-->MainScreen
@enduml
```